# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-21 18:25
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('profile_image', models.ImageField(blank=True, default='default-avatar.png', null=True, upload_to='uploads/users/')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('short_name', models.CharField(max_length=30, unique=True)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=150, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('order_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('retire_time', models.DateTimeField()),
                ('order_source', models.IntegerField(blank=True, choices=[(1, 'web store'), (2, 'management')], default=1, null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'pending'), (2, 'delivered'), (3, 'cancelled')], default=1, null=True)),
                ('discount', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flavor', models.CharField(blank=True, max_length=150, null=True)),
                ('size', models.CharField(blank=True, max_length=150, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.IntegerField()),
                ('image', models.ImageField(blank=True, default='default-avatar-product.png', null=True, upload_to='uploads/products/')),
                ('created_date', models.DateField(blank=True, default=django.utils.timezone.now, null=True)),
                ('status', models.IntegerField(blank=True, choices=[(1, 'active'), (2, 'inactive')], default=1, null=True)),
                ('discount', models.IntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.Category')),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='ProductInOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=1, max_digits=3)),
                ('wedding', models.BooleanField(default=False)),
                ('subtotal', models.IntegerField(blank=True, null=True)),
                ('discount', models.IntegerField(default=0)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.Product')),
            ],
            options={
                'db_table': 'product_in_order',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='product',
            field=models.ManyToManyField(through='management.ProductInOrder', to='management.Product'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='productinorder',
            unique_together=set([('order', 'product', 'wedding')]),
        ),
    ]
